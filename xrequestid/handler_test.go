package xrequestid

import (
	"strings"
	"testing"

	"github.com/renstrom/shortuuid"
	"golang.org/x/net/context"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

var (
	unaryInfo = &grpc.UnaryServerInfo{
		FullMethod: "TestService.UnaryMethod",
	}
	streamInfo = &grpc.StreamServerInfo{
		FullMethod:     "TestService.StreamMethod",
		IsServerStream: true,
	}
)

func shortStringValidator(requestID string) bool {
	if len(requestID) < 4 {
		return false
	}
	return true
}

type testServerStream struct {
	grpc.ServerStream
	ctx context.Context
}

func (ss *testServerStream) Context() context.Context {
	return ss.ctx
}

func (ss *testServerStream) SendMsg(m interface{}) error {
	return nil
}

func (f *testServerStream) RecvMsg(m interface{}) error {
	return nil
}

func TestUnaryServerWithoutRequestID(t *testing.T) {
	unaryHandler := func(ctx context.Context, req interface{}) (interface{}, error) {
		requestID := FromContext(ctx)
		if requestID == "" {
			t.Errorf("requestID must be generated by interceptor")
		}

		if got, want := FromContext(ctx), requestID; got != want {
			t.Errorf("expect requestID to %q, but got %q", want, got)
		}

		return "output", nil
	}

	ctx := context.Background()
	_, err := UnaryServerInterceptor()(ctx, "xyz", unaryInfo, unaryHandler)
	if err != nil {
		t.Fatalf("unexpected error: %v", err)
	}
}

func TestUnaryServerWithReqeustID(t *testing.T) {
	requestID := shortuuid.New()

	unaryHandler := func(ctx context.Context, req interface{}) (interface{}, error) {
		if got, want := FromContext(ctx), requestID; got != want {
			t.Errorf("expect requestID to %q, but got %q", want, got)
		}

		if got, want := FromContext(ctx), requestID; got != want {
			t.Errorf("expect requestID to %q, but got %q", want, got)
		}
		return "output", nil
	}

	ctx := context.Background()
	md := metadata.Pairs(DefaultXRequestIDKey, requestID)
	ctx = metadata.NewIncomingContext(ctx, md)
	_, err := UnaryServerInterceptor()(ctx, "xyz", unaryInfo, unaryHandler)
	if err != nil {
		t.Fatalf("unexpected error: %v", err)
	}
}

func TestUnaryServerWithReqeustIDChain(t *testing.T) {
	requestID := shortuuid.New()

	unaryHandler := func(ctx context.Context, req interface{}) (interface{}, error) {
		gotRequestID := FromContext(ctx)

		requestIDs := strings.Split(gotRequestID, ",")
		if got, want := len(requestIDs), 2; got != want {
			t.Errorf("expect the number of request id to %d, but got %d", want, got)
		}
		if got, want := requestIDs[0], requestID; got != want {
			t.Errorf("expect first request id to %q, but got %q", want, got)
		}
		return "output", nil
	}

	ctx := context.Background()
	md := metadata.Pairs(DefaultXRequestIDKey, requestID)
	ctx = metadata.NewIncomingContext(ctx, md)
	_, err := UnaryServerInterceptor(ChainRequestID())(ctx, "xyz", unaryInfo, unaryHandler)
	if err != nil {
		t.Fatalf("unexpected error: %v", err)
	}
}

func TestUnaryServerWithValidator(t *testing.T) {
	requestID := "xyz"

	unaryHandler := func(ctx context.Context, req interface{}) (interface{}, error) {
		if got, want := FromContext(ctx), requestID; got == want {
			t.Errorf("original request id should be invalid")
		}
		return "output", nil
	}

	ctx := context.Background()
	md := metadata.Pairs(DefaultXRequestIDKey, requestID)
	ctx = metadata.NewOutgoingContext(ctx, md)
	_, err := UnaryServerInterceptor(RequestIDValidator(shortStringValidator))(ctx, "xyz", unaryInfo, unaryHandler)
	if err != nil {
		t.Fatalf("unexpected error: %v", err)
	}
}

func TestStreamServerWithoutRequestID(t *testing.T) {
	streamHandler := func(srv interface{}, stream grpc.ServerStream) error {
		requestID := FromContext(stream.Context())
		if requestID == "" {
			t.Errorf("requestID must be generated by interceptor")
		}

		if got, want := FromContext(stream.Context()), requestID; got != want {
			t.Errorf("expect requestID to %q, but got %q", want, got)
		}
		return nil
	}
	testService := struct{}{}
	testStream := &testServerStream{ctx: context.Background()}

	err := StreamServerInterceptor()(testService, testStream, streamInfo, streamHandler)
	if err != nil {
		t.Fatalf("unexpected error: %v", err)
	}
}

func TestStreamServerWithRequestID(t *testing.T) {
	requestID := shortuuid.New()

	streamHandler := func(srv interface{}, stream grpc.ServerStream) error {
		requestID := FromContext(stream.Context())
		if requestID == "" {
			t.Errorf("requestID must be generated by interceptor")
		}

		if got, want := FromContext(stream.Context()), requestID; got != want {
			t.Errorf("expect requestID to %q, but got %q", want, got)
		}
		return nil
	}
	testService := struct{}{}
	ctx := context.Background()
	md := metadata.Pairs(DefaultXRequestIDKey, requestID)
	ctx = metadata.NewOutgoingContext(ctx, md)
	testStream := &testServerStream{ctx: ctx}

	err := StreamServerInterceptor()(testService, testStream, streamInfo, streamHandler)
	if err != nil {
		t.Fatalf("unexpected error: %v", err)
	}
}

func TestStreamServerWithRequestIDChain(t *testing.T) {
	requestID := shortuuid.New()

	streamHandler := func(srv interface{}, stream grpc.ServerStream) error {
		gotRequestID := FromContext(stream.Context())

		requestIDs := strings.Split(gotRequestID, ",")
		if got, want := len(requestIDs), 2; got != want {
			t.Errorf("expect the number of request id to %d, but got %d", want, got)
		}
		if got, want := requestIDs[0], requestID; got != want {
			t.Errorf("expect first request id to %q, but got %q", want, got)
		}
		return nil
	}
	testService := struct{}{}
	ctx := context.Background()
	md := metadata.Pairs(DefaultXRequestIDKey, requestID)
	ctx = metadata.NewIncomingContext(ctx, md)
	testStream := &testServerStream{ctx: ctx}

	err := StreamServerInterceptor(ChainRequestID())(testService, testStream, streamInfo, streamHandler)
	if err != nil {
		t.Fatalf("unexpected error: %v", err)
	}
}

func TestStreamServerWithValidator(t *testing.T) {
	requestID := "xyz"

	streamHandler := func(srv interface{}, stream grpc.ServerStream) error {
		gotRequestID := FromContext(stream.Context())
		if gotRequestID == requestID {
			t.Errorf("original request id should be invalid")
		}
		return nil
	}
	testService := struct{}{}
	ctx := context.Background()
	md := metadata.Pairs(DefaultXRequestIDKey, requestID)
	ctx = metadata.NewOutgoingContext(ctx, md)
	testStream := &testServerStream{ctx: ctx}

	err := StreamServerInterceptor(RequestIDValidator(shortStringValidator))(testService, testStream, streamInfo, streamHandler)
	if err != nil {
		t.Fatalf("unexpected error: %v", err)
	}
}
